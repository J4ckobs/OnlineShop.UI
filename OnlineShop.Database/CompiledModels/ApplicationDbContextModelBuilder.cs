// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Metadata.Internal;
using Microsoft.EntityFrameworkCore.Migrations;

#pragma warning disable 219, 612, 618
#nullable disable

namespace OnlineShop.Database.CompiledModels
{
    public partial class ApplicationDbContextModel
    {
        partial void Initialize()
        {
            var identityRole = IdentityRoleEntityType.Create(this);
            var identityRoleClaim = IdentityRoleClaimEntityType.Create(this);
            var identityUser = IdentityUserEntityType.Create(this);
            var identityUserClaim = IdentityUserClaimEntityType.Create(this);
            var identityUserLogin = IdentityUserLoginEntityType.Create(this);
            var identityUserRole = IdentityUserRoleEntityType.Create(this);
            var identityUserToken = IdentityUserTokenEntityType.Create(this);
            var order = OrderEntityType.Create(this);
            var orderStock = OrderStockEntityType.Create(this);
            var product = ProductEntityType.Create(this);
            var stock = StockEntityType.Create(this);
            var stockOnHold = StockOnHoldEntityType.Create(this);

            IdentityRoleClaimEntityType.CreateForeignKey1(identityRoleClaim, identityRole);
            IdentityUserClaimEntityType.CreateForeignKey1(identityUserClaim, identityUser);
            IdentityUserLoginEntityType.CreateForeignKey1(identityUserLogin, identityUser);
            IdentityUserRoleEntityType.CreateForeignKey1(identityUserRole, identityRole);
            IdentityUserRoleEntityType.CreateForeignKey2(identityUserRole, identityUser);
            IdentityUserTokenEntityType.CreateForeignKey1(identityUserToken, identityUser);
            OrderStockEntityType.CreateForeignKey1(orderStock, order);
            OrderStockEntityType.CreateForeignKey2(orderStock, stock);
            StockEntityType.CreateForeignKey1(stock, product);
            StockOnHoldEntityType.CreateForeignKey1(stockOnHold, stock);

            IdentityRoleEntityType.CreateAnnotations(identityRole);
            IdentityRoleClaimEntityType.CreateAnnotations(identityRoleClaim);
            IdentityUserEntityType.CreateAnnotations(identityUser);
            IdentityUserClaimEntityType.CreateAnnotations(identityUserClaim);
            IdentityUserLoginEntityType.CreateAnnotations(identityUserLogin);
            IdentityUserRoleEntityType.CreateAnnotations(identityUserRole);
            IdentityUserTokenEntityType.CreateAnnotations(identityUserToken);
            OrderEntityType.CreateAnnotations(order);
            OrderStockEntityType.CreateAnnotations(orderStock);
            ProductEntityType.CreateAnnotations(product);
            StockEntityType.CreateAnnotations(stock);
            StockOnHoldEntityType.CreateAnnotations(stockOnHold);

            AddAnnotation("ProductVersion", "8.0.10");
            AddAnnotation("Relational:MaxIdentifierLength", 128);
            AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);
            AddRuntimeAnnotation("Relational:RelationalModel", CreateRelationalModel());
        }

        private IRelationalModel CreateRelationalModel()
        {
            var relationalModel = new RelationalModel(this);

            var identityRole = FindEntityType("Microsoft.AspNetCore.Identity.IdentityRole")!;

            var defaultTableMappings = new List<TableMappingBase<ColumnMappingBase>>();
            identityRole.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings);
            var microsoftAspNetCoreIdentityIdentityRoleTableBase = new TableBase("Microsoft.AspNetCore.Identity.IdentityRole", null, relationalModel);
            var concurrencyStampColumnBase = new ColumnBase<ColumnMappingBase>("ConcurrencyStamp", "nvarchar(max)", microsoftAspNetCoreIdentityIdentityRoleTableBase)
            {
                IsNullable = true
            };
            microsoftAspNetCoreIdentityIdentityRoleTableBase.Columns.Add("ConcurrencyStamp", concurrencyStampColumnBase);
            var idColumnBase = new ColumnBase<ColumnMappingBase>("Id", "nvarchar(450)", microsoftAspNetCoreIdentityIdentityRoleTableBase);
            microsoftAspNetCoreIdentityIdentityRoleTableBase.Columns.Add("Id", idColumnBase);
            var nameColumnBase = new ColumnBase<ColumnMappingBase>("Name", "nvarchar(256)", microsoftAspNetCoreIdentityIdentityRoleTableBase)
            {
                IsNullable = true
            };
            microsoftAspNetCoreIdentityIdentityRoleTableBase.Columns.Add("Name", nameColumnBase);
            var normalizedNameColumnBase = new ColumnBase<ColumnMappingBase>("NormalizedName", "nvarchar(256)", microsoftAspNetCoreIdentityIdentityRoleTableBase)
            {
                IsNullable = true
            };
            microsoftAspNetCoreIdentityIdentityRoleTableBase.Columns.Add("NormalizedName", normalizedNameColumnBase);
            relationalModel.DefaultTables.Add("Microsoft.AspNetCore.Identity.IdentityRole", microsoftAspNetCoreIdentityIdentityRoleTableBase);
            var microsoftAspNetCoreIdentityIdentityRoleMappingBase = new TableMappingBase<ColumnMappingBase>(identityRole, microsoftAspNetCoreIdentityIdentityRoleTableBase, true);
            microsoftAspNetCoreIdentityIdentityRoleTableBase.AddTypeMapping(microsoftAspNetCoreIdentityIdentityRoleMappingBase, false);
            defaultTableMappings.Add(microsoftAspNetCoreIdentityIdentityRoleMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase, identityRole.FindProperty("Id")!, microsoftAspNetCoreIdentityIdentityRoleMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)concurrencyStampColumnBase, identityRole.FindProperty("ConcurrencyStamp")!, microsoftAspNetCoreIdentityIdentityRoleMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nameColumnBase, identityRole.FindProperty("Name")!, microsoftAspNetCoreIdentityIdentityRoleMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)normalizedNameColumnBase, identityRole.FindProperty("NormalizedName")!, microsoftAspNetCoreIdentityIdentityRoleMappingBase);

            var tableMappings = new List<TableMapping>();
            identityRole.SetRuntimeAnnotation("Relational:TableMappings", tableMappings);
            var aspNetRolesTable = new Table("AspNetRoles", null, relationalModel);
            var idColumn = new Column("Id", "nvarchar(450)", aspNetRolesTable);
            aspNetRolesTable.Columns.Add("Id", idColumn);
            var concurrencyStampColumn = new Column("ConcurrencyStamp", "nvarchar(max)", aspNetRolesTable)
            {
                IsNullable = true
            };
            aspNetRolesTable.Columns.Add("ConcurrencyStamp", concurrencyStampColumn);
            var nameColumn = new Column("Name", "nvarchar(256)", aspNetRolesTable)
            {
                IsNullable = true
            };
            aspNetRolesTable.Columns.Add("Name", nameColumn);
            var normalizedNameColumn = new Column("NormalizedName", "nvarchar(256)", aspNetRolesTable)
            {
                IsNullable = true
            };
            aspNetRolesTable.Columns.Add("NormalizedName", normalizedNameColumn);
            var pK_AspNetRoles = new UniqueConstraint("PK_AspNetRoles", aspNetRolesTable, new[] { idColumn });
            aspNetRolesTable.PrimaryKey = pK_AspNetRoles;
            var pK_AspNetRolesUc = RelationalModel.GetKey(this,
                "Microsoft.AspNetCore.Identity.IdentityRole",
                new[] { "Id" });
            pK_AspNetRoles.MappedKeys.Add(pK_AspNetRolesUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_AspNetRolesUc).Add(pK_AspNetRoles);
            aspNetRolesTable.UniqueConstraints.Add("PK_AspNetRoles", pK_AspNetRoles);
            var roleNameIndex = new TableIndex(
            "RoleNameIndex", aspNetRolesTable, new[] { normalizedNameColumn }, true);
            var roleNameIndexIx = RelationalModel.GetIndex(this,
                "Microsoft.AspNetCore.Identity.IdentityRole",
                new[] { "NormalizedName" });
            roleNameIndex.MappedIndexes.Add(roleNameIndexIx);
            RelationalModel.GetOrCreateTableIndexes(roleNameIndexIx).Add(roleNameIndex);
            aspNetRolesTable.Indexes.Add("RoleNameIndex", roleNameIndex);
            relationalModel.Tables.Add(("AspNetRoles", null), aspNetRolesTable);
            var aspNetRolesTableMapping = new TableMapping(identityRole, aspNetRolesTable, true);
            aspNetRolesTable.AddTypeMapping(aspNetRolesTableMapping, false);
            tableMappings.Add(aspNetRolesTableMapping);
            RelationalModel.CreateColumnMapping(idColumn, identityRole.FindProperty("Id")!, aspNetRolesTableMapping);
            RelationalModel.CreateColumnMapping(concurrencyStampColumn, identityRole.FindProperty("ConcurrencyStamp")!, aspNetRolesTableMapping);
            RelationalModel.CreateColumnMapping(nameColumn, identityRole.FindProperty("Name")!, aspNetRolesTableMapping);
            RelationalModel.CreateColumnMapping(normalizedNameColumn, identityRole.FindProperty("NormalizedName")!, aspNetRolesTableMapping);

            var identityRoleClaim = FindEntityType("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>")!;

            var defaultTableMappings0 = new List<TableMappingBase<ColumnMappingBase>>();
            identityRoleClaim.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings0);
            var microsoftAspNetCoreIdentityIdentityRoleClaimstringTableBase = new TableBase("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", null, relationalModel);
            var claimTypeColumnBase = new ColumnBase<ColumnMappingBase>("ClaimType", "nvarchar(max)", microsoftAspNetCoreIdentityIdentityRoleClaimstringTableBase)
            {
                IsNullable = true
            };
            microsoftAspNetCoreIdentityIdentityRoleClaimstringTableBase.Columns.Add("ClaimType", claimTypeColumnBase);
            var claimValueColumnBase = new ColumnBase<ColumnMappingBase>("ClaimValue", "nvarchar(max)", microsoftAspNetCoreIdentityIdentityRoleClaimstringTableBase)
            {
                IsNullable = true
            };
            microsoftAspNetCoreIdentityIdentityRoleClaimstringTableBase.Columns.Add("ClaimValue", claimValueColumnBase);
            var idColumnBase0 = new ColumnBase<ColumnMappingBase>("Id", "int", microsoftAspNetCoreIdentityIdentityRoleClaimstringTableBase);
            microsoftAspNetCoreIdentityIdentityRoleClaimstringTableBase.Columns.Add("Id", idColumnBase0);
            var roleIdColumnBase = new ColumnBase<ColumnMappingBase>("RoleId", "nvarchar(450)", microsoftAspNetCoreIdentityIdentityRoleClaimstringTableBase);
            microsoftAspNetCoreIdentityIdentityRoleClaimstringTableBase.Columns.Add("RoleId", roleIdColumnBase);
            relationalModel.DefaultTables.Add("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", microsoftAspNetCoreIdentityIdentityRoleClaimstringTableBase);
            var microsoftAspNetCoreIdentityIdentityRoleClaimstringMappingBase = new TableMappingBase<ColumnMappingBase>(identityRoleClaim, microsoftAspNetCoreIdentityIdentityRoleClaimstringTableBase, true);
            microsoftAspNetCoreIdentityIdentityRoleClaimstringTableBase.AddTypeMapping(microsoftAspNetCoreIdentityIdentityRoleClaimstringMappingBase, false);
            defaultTableMappings0.Add(microsoftAspNetCoreIdentityIdentityRoleClaimstringMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase0, identityRoleClaim.FindProperty("Id")!, microsoftAspNetCoreIdentityIdentityRoleClaimstringMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)claimTypeColumnBase, identityRoleClaim.FindProperty("ClaimType")!, microsoftAspNetCoreIdentityIdentityRoleClaimstringMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)claimValueColumnBase, identityRoleClaim.FindProperty("ClaimValue")!, microsoftAspNetCoreIdentityIdentityRoleClaimstringMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)roleIdColumnBase, identityRoleClaim.FindProperty("RoleId")!, microsoftAspNetCoreIdentityIdentityRoleClaimstringMappingBase);

            var tableMappings0 = new List<TableMapping>();
            identityRoleClaim.SetRuntimeAnnotation("Relational:TableMappings", tableMappings0);
            var aspNetRoleClaimsTable = new Table("AspNetRoleClaims", null, relationalModel);
            var idColumn0 = new Column("Id", "int", aspNetRoleClaimsTable);
            aspNetRoleClaimsTable.Columns.Add("Id", idColumn0);
            var claimTypeColumn = new Column("ClaimType", "nvarchar(max)", aspNetRoleClaimsTable)
            {
                IsNullable = true
            };
            aspNetRoleClaimsTable.Columns.Add("ClaimType", claimTypeColumn);
            var claimValueColumn = new Column("ClaimValue", "nvarchar(max)", aspNetRoleClaimsTable)
            {
                IsNullable = true
            };
            aspNetRoleClaimsTable.Columns.Add("ClaimValue", claimValueColumn);
            var roleIdColumn = new Column("RoleId", "nvarchar(450)", aspNetRoleClaimsTable);
            aspNetRoleClaimsTable.Columns.Add("RoleId", roleIdColumn);
            var pK_AspNetRoleClaims = new UniqueConstraint("PK_AspNetRoleClaims", aspNetRoleClaimsTable, new[] { idColumn0 });
            aspNetRoleClaimsTable.PrimaryKey = pK_AspNetRoleClaims;
            var pK_AspNetRoleClaimsUc = RelationalModel.GetKey(this,
                "Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>",
                new[] { "Id" });
            pK_AspNetRoleClaims.MappedKeys.Add(pK_AspNetRoleClaimsUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_AspNetRoleClaimsUc).Add(pK_AspNetRoleClaims);
            aspNetRoleClaimsTable.UniqueConstraints.Add("PK_AspNetRoleClaims", pK_AspNetRoleClaims);
            var iX_AspNetRoleClaims_RoleId = new TableIndex(
            "IX_AspNetRoleClaims_RoleId", aspNetRoleClaimsTable, new[] { roleIdColumn }, false);
            var iX_AspNetRoleClaims_RoleIdIx = RelationalModel.GetIndex(this,
                "Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>",
                new[] { "RoleId" });
            iX_AspNetRoleClaims_RoleId.MappedIndexes.Add(iX_AspNetRoleClaims_RoleIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_AspNetRoleClaims_RoleIdIx).Add(iX_AspNetRoleClaims_RoleId);
            aspNetRoleClaimsTable.Indexes.Add("IX_AspNetRoleClaims_RoleId", iX_AspNetRoleClaims_RoleId);
            relationalModel.Tables.Add(("AspNetRoleClaims", null), aspNetRoleClaimsTable);
            var aspNetRoleClaimsTableMapping = new TableMapping(identityRoleClaim, aspNetRoleClaimsTable, true);
            aspNetRoleClaimsTable.AddTypeMapping(aspNetRoleClaimsTableMapping, false);
            tableMappings0.Add(aspNetRoleClaimsTableMapping);
            RelationalModel.CreateColumnMapping(idColumn0, identityRoleClaim.FindProperty("Id")!, aspNetRoleClaimsTableMapping);
            RelationalModel.CreateColumnMapping(claimTypeColumn, identityRoleClaim.FindProperty("ClaimType")!, aspNetRoleClaimsTableMapping);
            RelationalModel.CreateColumnMapping(claimValueColumn, identityRoleClaim.FindProperty("ClaimValue")!, aspNetRoleClaimsTableMapping);
            RelationalModel.CreateColumnMapping(roleIdColumn, identityRoleClaim.FindProperty("RoleId")!, aspNetRoleClaimsTableMapping);

            var identityUser = FindEntityType("Microsoft.AspNetCore.Identity.IdentityUser")!;

            var defaultTableMappings1 = new List<TableMappingBase<ColumnMappingBase>>();
            identityUser.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings1);
            var microsoftAspNetCoreIdentityIdentityUserTableBase = new TableBase("Microsoft.AspNetCore.Identity.IdentityUser", null, relationalModel);
            var accessFailedCountColumnBase = new ColumnBase<ColumnMappingBase>("AccessFailedCount", "int", microsoftAspNetCoreIdentityIdentityUserTableBase);
            microsoftAspNetCoreIdentityIdentityUserTableBase.Columns.Add("AccessFailedCount", accessFailedCountColumnBase);
            var concurrencyStampColumnBase0 = new ColumnBase<ColumnMappingBase>("ConcurrencyStamp", "nvarchar(max)", microsoftAspNetCoreIdentityIdentityUserTableBase)
            {
                IsNullable = true
            };
            microsoftAspNetCoreIdentityIdentityUserTableBase.Columns.Add("ConcurrencyStamp", concurrencyStampColumnBase0);
            var emailColumnBase = new ColumnBase<ColumnMappingBase>("Email", "nvarchar(256)", microsoftAspNetCoreIdentityIdentityUserTableBase)
            {
                IsNullable = true
            };
            microsoftAspNetCoreIdentityIdentityUserTableBase.Columns.Add("Email", emailColumnBase);
            var emailConfirmedColumnBase = new ColumnBase<ColumnMappingBase>("EmailConfirmed", "bit", microsoftAspNetCoreIdentityIdentityUserTableBase);
            microsoftAspNetCoreIdentityIdentityUserTableBase.Columns.Add("EmailConfirmed", emailConfirmedColumnBase);
            var idColumnBase1 = new ColumnBase<ColumnMappingBase>("Id", "nvarchar(450)", microsoftAspNetCoreIdentityIdentityUserTableBase);
            microsoftAspNetCoreIdentityIdentityUserTableBase.Columns.Add("Id", idColumnBase1);
            var lockoutEnabledColumnBase = new ColumnBase<ColumnMappingBase>("LockoutEnabled", "bit", microsoftAspNetCoreIdentityIdentityUserTableBase);
            microsoftAspNetCoreIdentityIdentityUserTableBase.Columns.Add("LockoutEnabled", lockoutEnabledColumnBase);
            var lockoutEndColumnBase = new ColumnBase<ColumnMappingBase>("LockoutEnd", "datetimeoffset", microsoftAspNetCoreIdentityIdentityUserTableBase)
            {
                IsNullable = true
            };
            microsoftAspNetCoreIdentityIdentityUserTableBase.Columns.Add("LockoutEnd", lockoutEndColumnBase);
            var normalizedEmailColumnBase = new ColumnBase<ColumnMappingBase>("NormalizedEmail", "nvarchar(256)", microsoftAspNetCoreIdentityIdentityUserTableBase)
            {
                IsNullable = true
            };
            microsoftAspNetCoreIdentityIdentityUserTableBase.Columns.Add("NormalizedEmail", normalizedEmailColumnBase);
            var normalizedUserNameColumnBase = new ColumnBase<ColumnMappingBase>("NormalizedUserName", "nvarchar(256)", microsoftAspNetCoreIdentityIdentityUserTableBase)
            {
                IsNullable = true
            };
            microsoftAspNetCoreIdentityIdentityUserTableBase.Columns.Add("NormalizedUserName", normalizedUserNameColumnBase);
            var passwordHashColumnBase = new ColumnBase<ColumnMappingBase>("PasswordHash", "nvarchar(max)", microsoftAspNetCoreIdentityIdentityUserTableBase)
            {
                IsNullable = true
            };
            microsoftAspNetCoreIdentityIdentityUserTableBase.Columns.Add("PasswordHash", passwordHashColumnBase);
            var phoneNumberColumnBase = new ColumnBase<ColumnMappingBase>("PhoneNumber", "nvarchar(max)", microsoftAspNetCoreIdentityIdentityUserTableBase)
            {
                IsNullable = true
            };
            microsoftAspNetCoreIdentityIdentityUserTableBase.Columns.Add("PhoneNumber", phoneNumberColumnBase);
            var phoneNumberConfirmedColumnBase = new ColumnBase<ColumnMappingBase>("PhoneNumberConfirmed", "bit", microsoftAspNetCoreIdentityIdentityUserTableBase);
            microsoftAspNetCoreIdentityIdentityUserTableBase.Columns.Add("PhoneNumberConfirmed", phoneNumberConfirmedColumnBase);
            var securityStampColumnBase = new ColumnBase<ColumnMappingBase>("SecurityStamp", "nvarchar(max)", microsoftAspNetCoreIdentityIdentityUserTableBase)
            {
                IsNullable = true
            };
            microsoftAspNetCoreIdentityIdentityUserTableBase.Columns.Add("SecurityStamp", securityStampColumnBase);
            var twoFactorEnabledColumnBase = new ColumnBase<ColumnMappingBase>("TwoFactorEnabled", "bit", microsoftAspNetCoreIdentityIdentityUserTableBase);
            microsoftAspNetCoreIdentityIdentityUserTableBase.Columns.Add("TwoFactorEnabled", twoFactorEnabledColumnBase);
            var userNameColumnBase = new ColumnBase<ColumnMappingBase>("UserName", "nvarchar(256)", microsoftAspNetCoreIdentityIdentityUserTableBase)
            {
                IsNullable = true
            };
            microsoftAspNetCoreIdentityIdentityUserTableBase.Columns.Add("UserName", userNameColumnBase);
            relationalModel.DefaultTables.Add("Microsoft.AspNetCore.Identity.IdentityUser", microsoftAspNetCoreIdentityIdentityUserTableBase);
            var microsoftAspNetCoreIdentityIdentityUserMappingBase = new TableMappingBase<ColumnMappingBase>(identityUser, microsoftAspNetCoreIdentityIdentityUserTableBase, true);
            microsoftAspNetCoreIdentityIdentityUserTableBase.AddTypeMapping(microsoftAspNetCoreIdentityIdentityUserMappingBase, false);
            defaultTableMappings1.Add(microsoftAspNetCoreIdentityIdentityUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase1, identityUser.FindProperty("Id")!, microsoftAspNetCoreIdentityIdentityUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)accessFailedCountColumnBase, identityUser.FindProperty("AccessFailedCount")!, microsoftAspNetCoreIdentityIdentityUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)concurrencyStampColumnBase0, identityUser.FindProperty("ConcurrencyStamp")!, microsoftAspNetCoreIdentityIdentityUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)emailColumnBase, identityUser.FindProperty("Email")!, microsoftAspNetCoreIdentityIdentityUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)emailConfirmedColumnBase, identityUser.FindProperty("EmailConfirmed")!, microsoftAspNetCoreIdentityIdentityUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)lockoutEnabledColumnBase, identityUser.FindProperty("LockoutEnabled")!, microsoftAspNetCoreIdentityIdentityUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)lockoutEndColumnBase, identityUser.FindProperty("LockoutEnd")!, microsoftAspNetCoreIdentityIdentityUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)normalizedEmailColumnBase, identityUser.FindProperty("NormalizedEmail")!, microsoftAspNetCoreIdentityIdentityUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)normalizedUserNameColumnBase, identityUser.FindProperty("NormalizedUserName")!, microsoftAspNetCoreIdentityIdentityUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)passwordHashColumnBase, identityUser.FindProperty("PasswordHash")!, microsoftAspNetCoreIdentityIdentityUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)phoneNumberColumnBase, identityUser.FindProperty("PhoneNumber")!, microsoftAspNetCoreIdentityIdentityUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)phoneNumberConfirmedColumnBase, identityUser.FindProperty("PhoneNumberConfirmed")!, microsoftAspNetCoreIdentityIdentityUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)securityStampColumnBase, identityUser.FindProperty("SecurityStamp")!, microsoftAspNetCoreIdentityIdentityUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)twoFactorEnabledColumnBase, identityUser.FindProperty("TwoFactorEnabled")!, microsoftAspNetCoreIdentityIdentityUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)userNameColumnBase, identityUser.FindProperty("UserName")!, microsoftAspNetCoreIdentityIdentityUserMappingBase);

            var tableMappings1 = new List<TableMapping>();
            identityUser.SetRuntimeAnnotation("Relational:TableMappings", tableMappings1);
            var aspNetUsersTable = new Table("AspNetUsers", null, relationalModel);
            var idColumn1 = new Column("Id", "nvarchar(450)", aspNetUsersTable);
            aspNetUsersTable.Columns.Add("Id", idColumn1);
            var accessFailedCountColumn = new Column("AccessFailedCount", "int", aspNetUsersTable);
            aspNetUsersTable.Columns.Add("AccessFailedCount", accessFailedCountColumn);
            var concurrencyStampColumn0 = new Column("ConcurrencyStamp", "nvarchar(max)", aspNetUsersTable)
            {
                IsNullable = true
            };
            aspNetUsersTable.Columns.Add("ConcurrencyStamp", concurrencyStampColumn0);
            var emailColumn = new Column("Email", "nvarchar(256)", aspNetUsersTable)
            {
                IsNullable = true
            };
            aspNetUsersTable.Columns.Add("Email", emailColumn);
            var emailConfirmedColumn = new Column("EmailConfirmed", "bit", aspNetUsersTable);
            aspNetUsersTable.Columns.Add("EmailConfirmed", emailConfirmedColumn);
            var lockoutEnabledColumn = new Column("LockoutEnabled", "bit", aspNetUsersTable);
            aspNetUsersTable.Columns.Add("LockoutEnabled", lockoutEnabledColumn);
            var lockoutEndColumn = new Column("LockoutEnd", "datetimeoffset", aspNetUsersTable)
            {
                IsNullable = true
            };
            aspNetUsersTable.Columns.Add("LockoutEnd", lockoutEndColumn);
            var normalizedEmailColumn = new Column("NormalizedEmail", "nvarchar(256)", aspNetUsersTable)
            {
                IsNullable = true
            };
            aspNetUsersTable.Columns.Add("NormalizedEmail", normalizedEmailColumn);
            var normalizedUserNameColumn = new Column("NormalizedUserName", "nvarchar(256)", aspNetUsersTable)
            {
                IsNullable = true
            };
            aspNetUsersTable.Columns.Add("NormalizedUserName", normalizedUserNameColumn);
            var passwordHashColumn = new Column("PasswordHash", "nvarchar(max)", aspNetUsersTable)
            {
                IsNullable = true
            };
            aspNetUsersTable.Columns.Add("PasswordHash", passwordHashColumn);
            var phoneNumberColumn = new Column("PhoneNumber", "nvarchar(max)", aspNetUsersTable)
            {
                IsNullable = true
            };
            aspNetUsersTable.Columns.Add("PhoneNumber", phoneNumberColumn);
            var phoneNumberConfirmedColumn = new Column("PhoneNumberConfirmed", "bit", aspNetUsersTable);
            aspNetUsersTable.Columns.Add("PhoneNumberConfirmed", phoneNumberConfirmedColumn);
            var securityStampColumn = new Column("SecurityStamp", "nvarchar(max)", aspNetUsersTable)
            {
                IsNullable = true
            };
            aspNetUsersTable.Columns.Add("SecurityStamp", securityStampColumn);
            var twoFactorEnabledColumn = new Column("TwoFactorEnabled", "bit", aspNetUsersTable);
            aspNetUsersTable.Columns.Add("TwoFactorEnabled", twoFactorEnabledColumn);
            var userNameColumn = new Column("UserName", "nvarchar(256)", aspNetUsersTable)
            {
                IsNullable = true
            };
            aspNetUsersTable.Columns.Add("UserName", userNameColumn);
            var pK_AspNetUsers = new UniqueConstraint("PK_AspNetUsers", aspNetUsersTable, new[] { idColumn1 });
            aspNetUsersTable.PrimaryKey = pK_AspNetUsers;
            var pK_AspNetUsersUc = RelationalModel.GetKey(this,
                "Microsoft.AspNetCore.Identity.IdentityUser",
                new[] { "Id" });
            pK_AspNetUsers.MappedKeys.Add(pK_AspNetUsersUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_AspNetUsersUc).Add(pK_AspNetUsers);
            aspNetUsersTable.UniqueConstraints.Add("PK_AspNetUsers", pK_AspNetUsers);
            var emailIndex = new TableIndex(
            "EmailIndex", aspNetUsersTable, new[] { normalizedEmailColumn }, false);
            var emailIndexIx = RelationalModel.GetIndex(this,
                "Microsoft.AspNetCore.Identity.IdentityUser",
                new[] { "NormalizedEmail" });
            emailIndex.MappedIndexes.Add(emailIndexIx);
            RelationalModel.GetOrCreateTableIndexes(emailIndexIx).Add(emailIndex);
            aspNetUsersTable.Indexes.Add("EmailIndex", emailIndex);
            var userNameIndex = new TableIndex(
            "UserNameIndex", aspNetUsersTable, new[] { normalizedUserNameColumn }, true);
            var userNameIndexIx = RelationalModel.GetIndex(this,
                "Microsoft.AspNetCore.Identity.IdentityUser",
                new[] { "NormalizedUserName" });
            userNameIndex.MappedIndexes.Add(userNameIndexIx);
            RelationalModel.GetOrCreateTableIndexes(userNameIndexIx).Add(userNameIndex);
            aspNetUsersTable.Indexes.Add("UserNameIndex", userNameIndex);
            relationalModel.Tables.Add(("AspNetUsers", null), aspNetUsersTable);
            var aspNetUsersTableMapping = new TableMapping(identityUser, aspNetUsersTable, true);
            aspNetUsersTable.AddTypeMapping(aspNetUsersTableMapping, false);
            tableMappings1.Add(aspNetUsersTableMapping);
            RelationalModel.CreateColumnMapping(idColumn1, identityUser.FindProperty("Id")!, aspNetUsersTableMapping);
            RelationalModel.CreateColumnMapping(accessFailedCountColumn, identityUser.FindProperty("AccessFailedCount")!, aspNetUsersTableMapping);
            RelationalModel.CreateColumnMapping(concurrencyStampColumn0, identityUser.FindProperty("ConcurrencyStamp")!, aspNetUsersTableMapping);
            RelationalModel.CreateColumnMapping(emailColumn, identityUser.FindProperty("Email")!, aspNetUsersTableMapping);
            RelationalModel.CreateColumnMapping(emailConfirmedColumn, identityUser.FindProperty("EmailConfirmed")!, aspNetUsersTableMapping);
            RelationalModel.CreateColumnMapping(lockoutEnabledColumn, identityUser.FindProperty("LockoutEnabled")!, aspNetUsersTableMapping);
            RelationalModel.CreateColumnMapping(lockoutEndColumn, identityUser.FindProperty("LockoutEnd")!, aspNetUsersTableMapping);
            RelationalModel.CreateColumnMapping(normalizedEmailColumn, identityUser.FindProperty("NormalizedEmail")!, aspNetUsersTableMapping);
            RelationalModel.CreateColumnMapping(normalizedUserNameColumn, identityUser.FindProperty("NormalizedUserName")!, aspNetUsersTableMapping);
            RelationalModel.CreateColumnMapping(passwordHashColumn, identityUser.FindProperty("PasswordHash")!, aspNetUsersTableMapping);
            RelationalModel.CreateColumnMapping(phoneNumberColumn, identityUser.FindProperty("PhoneNumber")!, aspNetUsersTableMapping);
            RelationalModel.CreateColumnMapping(phoneNumberConfirmedColumn, identityUser.FindProperty("PhoneNumberConfirmed")!, aspNetUsersTableMapping);
            RelationalModel.CreateColumnMapping(securityStampColumn, identityUser.FindProperty("SecurityStamp")!, aspNetUsersTableMapping);
            RelationalModel.CreateColumnMapping(twoFactorEnabledColumn, identityUser.FindProperty("TwoFactorEnabled")!, aspNetUsersTableMapping);
            RelationalModel.CreateColumnMapping(userNameColumn, identityUser.FindProperty("UserName")!, aspNetUsersTableMapping);

            var identityUserClaim = FindEntityType("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>")!;

            var defaultTableMappings2 = new List<TableMappingBase<ColumnMappingBase>>();
            identityUserClaim.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings2);
            var microsoftAspNetCoreIdentityIdentityUserClaimstringTableBase = new TableBase("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", null, relationalModel);
            var claimTypeColumnBase0 = new ColumnBase<ColumnMappingBase>("ClaimType", "nvarchar(max)", microsoftAspNetCoreIdentityIdentityUserClaimstringTableBase)
            {
                IsNullable = true
            };
            microsoftAspNetCoreIdentityIdentityUserClaimstringTableBase.Columns.Add("ClaimType", claimTypeColumnBase0);
            var claimValueColumnBase0 = new ColumnBase<ColumnMappingBase>("ClaimValue", "nvarchar(max)", microsoftAspNetCoreIdentityIdentityUserClaimstringTableBase)
            {
                IsNullable = true
            };
            microsoftAspNetCoreIdentityIdentityUserClaimstringTableBase.Columns.Add("ClaimValue", claimValueColumnBase0);
            var idColumnBase2 = new ColumnBase<ColumnMappingBase>("Id", "int", microsoftAspNetCoreIdentityIdentityUserClaimstringTableBase);
            microsoftAspNetCoreIdentityIdentityUserClaimstringTableBase.Columns.Add("Id", idColumnBase2);
            var userIdColumnBase = new ColumnBase<ColumnMappingBase>("UserId", "nvarchar(450)", microsoftAspNetCoreIdentityIdentityUserClaimstringTableBase);
            microsoftAspNetCoreIdentityIdentityUserClaimstringTableBase.Columns.Add("UserId", userIdColumnBase);
            relationalModel.DefaultTables.Add("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", microsoftAspNetCoreIdentityIdentityUserClaimstringTableBase);
            var microsoftAspNetCoreIdentityIdentityUserClaimstringMappingBase = new TableMappingBase<ColumnMappingBase>(identityUserClaim, microsoftAspNetCoreIdentityIdentityUserClaimstringTableBase, true);
            microsoftAspNetCoreIdentityIdentityUserClaimstringTableBase.AddTypeMapping(microsoftAspNetCoreIdentityIdentityUserClaimstringMappingBase, false);
            defaultTableMappings2.Add(microsoftAspNetCoreIdentityIdentityUserClaimstringMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase2, identityUserClaim.FindProperty("Id")!, microsoftAspNetCoreIdentityIdentityUserClaimstringMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)claimTypeColumnBase0, identityUserClaim.FindProperty("ClaimType")!, microsoftAspNetCoreIdentityIdentityUserClaimstringMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)claimValueColumnBase0, identityUserClaim.FindProperty("ClaimValue")!, microsoftAspNetCoreIdentityIdentityUserClaimstringMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)userIdColumnBase, identityUserClaim.FindProperty("UserId")!, microsoftAspNetCoreIdentityIdentityUserClaimstringMappingBase);

            var tableMappings2 = new List<TableMapping>();
            identityUserClaim.SetRuntimeAnnotation("Relational:TableMappings", tableMappings2);
            var aspNetUserClaimsTable = new Table("AspNetUserClaims", null, relationalModel);
            var idColumn2 = new Column("Id", "int", aspNetUserClaimsTable);
            aspNetUserClaimsTable.Columns.Add("Id", idColumn2);
            var claimTypeColumn0 = new Column("ClaimType", "nvarchar(max)", aspNetUserClaimsTable)
            {
                IsNullable = true
            };
            aspNetUserClaimsTable.Columns.Add("ClaimType", claimTypeColumn0);
            var claimValueColumn0 = new Column("ClaimValue", "nvarchar(max)", aspNetUserClaimsTable)
            {
                IsNullable = true
            };
            aspNetUserClaimsTable.Columns.Add("ClaimValue", claimValueColumn0);
            var userIdColumn = new Column("UserId", "nvarchar(450)", aspNetUserClaimsTable);
            aspNetUserClaimsTable.Columns.Add("UserId", userIdColumn);
            var pK_AspNetUserClaims = new UniqueConstraint("PK_AspNetUserClaims", aspNetUserClaimsTable, new[] { idColumn2 });
            aspNetUserClaimsTable.PrimaryKey = pK_AspNetUserClaims;
            var pK_AspNetUserClaimsUc = RelationalModel.GetKey(this,
                "Microsoft.AspNetCore.Identity.IdentityUserClaim<string>",
                new[] { "Id" });
            pK_AspNetUserClaims.MappedKeys.Add(pK_AspNetUserClaimsUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_AspNetUserClaimsUc).Add(pK_AspNetUserClaims);
            aspNetUserClaimsTable.UniqueConstraints.Add("PK_AspNetUserClaims", pK_AspNetUserClaims);
            var iX_AspNetUserClaims_UserId = new TableIndex(
            "IX_AspNetUserClaims_UserId", aspNetUserClaimsTable, new[] { userIdColumn }, false);
            var iX_AspNetUserClaims_UserIdIx = RelationalModel.GetIndex(this,
                "Microsoft.AspNetCore.Identity.IdentityUserClaim<string>",
                new[] { "UserId" });
            iX_AspNetUserClaims_UserId.MappedIndexes.Add(iX_AspNetUserClaims_UserIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_AspNetUserClaims_UserIdIx).Add(iX_AspNetUserClaims_UserId);
            aspNetUserClaimsTable.Indexes.Add("IX_AspNetUserClaims_UserId", iX_AspNetUserClaims_UserId);
            relationalModel.Tables.Add(("AspNetUserClaims", null), aspNetUserClaimsTable);
            var aspNetUserClaimsTableMapping = new TableMapping(identityUserClaim, aspNetUserClaimsTable, true);
            aspNetUserClaimsTable.AddTypeMapping(aspNetUserClaimsTableMapping, false);
            tableMappings2.Add(aspNetUserClaimsTableMapping);
            RelationalModel.CreateColumnMapping(idColumn2, identityUserClaim.FindProperty("Id")!, aspNetUserClaimsTableMapping);
            RelationalModel.CreateColumnMapping(claimTypeColumn0, identityUserClaim.FindProperty("ClaimType")!, aspNetUserClaimsTableMapping);
            RelationalModel.CreateColumnMapping(claimValueColumn0, identityUserClaim.FindProperty("ClaimValue")!, aspNetUserClaimsTableMapping);
            RelationalModel.CreateColumnMapping(userIdColumn, identityUserClaim.FindProperty("UserId")!, aspNetUserClaimsTableMapping);

            var identityUserLogin = FindEntityType("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>")!;

            var defaultTableMappings3 = new List<TableMappingBase<ColumnMappingBase>>();
            identityUserLogin.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings3);
            var microsoftAspNetCoreIdentityIdentityUserLoginstringTableBase = new TableBase("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", null, relationalModel);
            var loginProviderColumnBase = new ColumnBase<ColumnMappingBase>("LoginProvider", "nvarchar(450)", microsoftAspNetCoreIdentityIdentityUserLoginstringTableBase);
            microsoftAspNetCoreIdentityIdentityUserLoginstringTableBase.Columns.Add("LoginProvider", loginProviderColumnBase);
            var providerDisplayNameColumnBase = new ColumnBase<ColumnMappingBase>("ProviderDisplayName", "nvarchar(max)", microsoftAspNetCoreIdentityIdentityUserLoginstringTableBase)
            {
                IsNullable = true
            };
            microsoftAspNetCoreIdentityIdentityUserLoginstringTableBase.Columns.Add("ProviderDisplayName", providerDisplayNameColumnBase);
            var providerKeyColumnBase = new ColumnBase<ColumnMappingBase>("ProviderKey", "nvarchar(450)", microsoftAspNetCoreIdentityIdentityUserLoginstringTableBase);
            microsoftAspNetCoreIdentityIdentityUserLoginstringTableBase.Columns.Add("ProviderKey", providerKeyColumnBase);
            var userIdColumnBase0 = new ColumnBase<ColumnMappingBase>("UserId", "nvarchar(450)", microsoftAspNetCoreIdentityIdentityUserLoginstringTableBase);
            microsoftAspNetCoreIdentityIdentityUserLoginstringTableBase.Columns.Add("UserId", userIdColumnBase0);
            relationalModel.DefaultTables.Add("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", microsoftAspNetCoreIdentityIdentityUserLoginstringTableBase);
            var microsoftAspNetCoreIdentityIdentityUserLoginstringMappingBase = new TableMappingBase<ColumnMappingBase>(identityUserLogin, microsoftAspNetCoreIdentityIdentityUserLoginstringTableBase, true);
            microsoftAspNetCoreIdentityIdentityUserLoginstringTableBase.AddTypeMapping(microsoftAspNetCoreIdentityIdentityUserLoginstringMappingBase, false);
            defaultTableMappings3.Add(microsoftAspNetCoreIdentityIdentityUserLoginstringMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)loginProviderColumnBase, identityUserLogin.FindProperty("LoginProvider")!, microsoftAspNetCoreIdentityIdentityUserLoginstringMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)providerKeyColumnBase, identityUserLogin.FindProperty("ProviderKey")!, microsoftAspNetCoreIdentityIdentityUserLoginstringMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)providerDisplayNameColumnBase, identityUserLogin.FindProperty("ProviderDisplayName")!, microsoftAspNetCoreIdentityIdentityUserLoginstringMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)userIdColumnBase0, identityUserLogin.FindProperty("UserId")!, microsoftAspNetCoreIdentityIdentityUserLoginstringMappingBase);

            var tableMappings3 = new List<TableMapping>();
            identityUserLogin.SetRuntimeAnnotation("Relational:TableMappings", tableMappings3);
            var aspNetUserLoginsTable = new Table("AspNetUserLogins", null, relationalModel);
            var loginProviderColumn = new Column("LoginProvider", "nvarchar(450)", aspNetUserLoginsTable);
            aspNetUserLoginsTable.Columns.Add("LoginProvider", loginProviderColumn);
            var providerKeyColumn = new Column("ProviderKey", "nvarchar(450)", aspNetUserLoginsTable);
            aspNetUserLoginsTable.Columns.Add("ProviderKey", providerKeyColumn);
            var providerDisplayNameColumn = new Column("ProviderDisplayName", "nvarchar(max)", aspNetUserLoginsTable)
            {
                IsNullable = true
            };
            aspNetUserLoginsTable.Columns.Add("ProviderDisplayName", providerDisplayNameColumn);
            var userIdColumn0 = new Column("UserId", "nvarchar(450)", aspNetUserLoginsTable);
            aspNetUserLoginsTable.Columns.Add("UserId", userIdColumn0);
            var pK_AspNetUserLogins = new UniqueConstraint("PK_AspNetUserLogins", aspNetUserLoginsTable, new[] { loginProviderColumn, providerKeyColumn });
            aspNetUserLoginsTable.PrimaryKey = pK_AspNetUserLogins;
            var pK_AspNetUserLoginsUc = RelationalModel.GetKey(this,
                "Microsoft.AspNetCore.Identity.IdentityUserLogin<string>",
                new[] { "LoginProvider", "ProviderKey" });
            pK_AspNetUserLogins.MappedKeys.Add(pK_AspNetUserLoginsUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_AspNetUserLoginsUc).Add(pK_AspNetUserLogins);
            aspNetUserLoginsTable.UniqueConstraints.Add("PK_AspNetUserLogins", pK_AspNetUserLogins);
            var iX_AspNetUserLogins_UserId = new TableIndex(
            "IX_AspNetUserLogins_UserId", aspNetUserLoginsTable, new[] { userIdColumn0 }, false);
            var iX_AspNetUserLogins_UserIdIx = RelationalModel.GetIndex(this,
                "Microsoft.AspNetCore.Identity.IdentityUserLogin<string>",
                new[] { "UserId" });
            iX_AspNetUserLogins_UserId.MappedIndexes.Add(iX_AspNetUserLogins_UserIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_AspNetUserLogins_UserIdIx).Add(iX_AspNetUserLogins_UserId);
            aspNetUserLoginsTable.Indexes.Add("IX_AspNetUserLogins_UserId", iX_AspNetUserLogins_UserId);
            relationalModel.Tables.Add(("AspNetUserLogins", null), aspNetUserLoginsTable);
            var aspNetUserLoginsTableMapping = new TableMapping(identityUserLogin, aspNetUserLoginsTable, true);
            aspNetUserLoginsTable.AddTypeMapping(aspNetUserLoginsTableMapping, false);
            tableMappings3.Add(aspNetUserLoginsTableMapping);
            RelationalModel.CreateColumnMapping(loginProviderColumn, identityUserLogin.FindProperty("LoginProvider")!, aspNetUserLoginsTableMapping);
            RelationalModel.CreateColumnMapping(providerKeyColumn, identityUserLogin.FindProperty("ProviderKey")!, aspNetUserLoginsTableMapping);
            RelationalModel.CreateColumnMapping(providerDisplayNameColumn, identityUserLogin.FindProperty("ProviderDisplayName")!, aspNetUserLoginsTableMapping);
            RelationalModel.CreateColumnMapping(userIdColumn0, identityUserLogin.FindProperty("UserId")!, aspNetUserLoginsTableMapping);

            var identityUserRole = FindEntityType("Microsoft.AspNetCore.Identity.IdentityUserRole<string>")!;

            var defaultTableMappings4 = new List<TableMappingBase<ColumnMappingBase>>();
            identityUserRole.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings4);
            var microsoftAspNetCoreIdentityIdentityUserRolestringTableBase = new TableBase("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", null, relationalModel);
            var roleIdColumnBase0 = new ColumnBase<ColumnMappingBase>("RoleId", "nvarchar(450)", microsoftAspNetCoreIdentityIdentityUserRolestringTableBase);
            microsoftAspNetCoreIdentityIdentityUserRolestringTableBase.Columns.Add("RoleId", roleIdColumnBase0);
            var userIdColumnBase1 = new ColumnBase<ColumnMappingBase>("UserId", "nvarchar(450)", microsoftAspNetCoreIdentityIdentityUserRolestringTableBase);
            microsoftAspNetCoreIdentityIdentityUserRolestringTableBase.Columns.Add("UserId", userIdColumnBase1);
            relationalModel.DefaultTables.Add("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", microsoftAspNetCoreIdentityIdentityUserRolestringTableBase);
            var microsoftAspNetCoreIdentityIdentityUserRolestringMappingBase = new TableMappingBase<ColumnMappingBase>(identityUserRole, microsoftAspNetCoreIdentityIdentityUserRolestringTableBase, true);
            microsoftAspNetCoreIdentityIdentityUserRolestringTableBase.AddTypeMapping(microsoftAspNetCoreIdentityIdentityUserRolestringMappingBase, false);
            defaultTableMappings4.Add(microsoftAspNetCoreIdentityIdentityUserRolestringMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)roleIdColumnBase0, identityUserRole.FindProperty("RoleId")!, microsoftAspNetCoreIdentityIdentityUserRolestringMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)userIdColumnBase1, identityUserRole.FindProperty("UserId")!, microsoftAspNetCoreIdentityIdentityUserRolestringMappingBase);

            var tableMappings4 = new List<TableMapping>();
            identityUserRole.SetRuntimeAnnotation("Relational:TableMappings", tableMappings4);
            var aspNetUserRolesTable = new Table("AspNetUserRoles", null, relationalModel);
            var userIdColumn1 = new Column("UserId", "nvarchar(450)", aspNetUserRolesTable);
            aspNetUserRolesTable.Columns.Add("UserId", userIdColumn1);
            var roleIdColumn0 = new Column("RoleId", "nvarchar(450)", aspNetUserRolesTable);
            aspNetUserRolesTable.Columns.Add("RoleId", roleIdColumn0);
            var pK_AspNetUserRoles = new UniqueConstraint("PK_AspNetUserRoles", aspNetUserRolesTable, new[] { userIdColumn1, roleIdColumn0 });
            aspNetUserRolesTable.PrimaryKey = pK_AspNetUserRoles;
            var pK_AspNetUserRolesUc = RelationalModel.GetKey(this,
                "Microsoft.AspNetCore.Identity.IdentityUserRole<string>",
                new[] { "UserId", "RoleId" });
            pK_AspNetUserRoles.MappedKeys.Add(pK_AspNetUserRolesUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_AspNetUserRolesUc).Add(pK_AspNetUserRoles);
            aspNetUserRolesTable.UniqueConstraints.Add("PK_AspNetUserRoles", pK_AspNetUserRoles);
            var iX_AspNetUserRoles_RoleId = new TableIndex(
            "IX_AspNetUserRoles_RoleId", aspNetUserRolesTable, new[] { roleIdColumn0 }, false);
            var iX_AspNetUserRoles_RoleIdIx = RelationalModel.GetIndex(this,
                "Microsoft.AspNetCore.Identity.IdentityUserRole<string>",
                new[] { "RoleId" });
            iX_AspNetUserRoles_RoleId.MappedIndexes.Add(iX_AspNetUserRoles_RoleIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_AspNetUserRoles_RoleIdIx).Add(iX_AspNetUserRoles_RoleId);
            aspNetUserRolesTable.Indexes.Add("IX_AspNetUserRoles_RoleId", iX_AspNetUserRoles_RoleId);
            relationalModel.Tables.Add(("AspNetUserRoles", null), aspNetUserRolesTable);
            var aspNetUserRolesTableMapping = new TableMapping(identityUserRole, aspNetUserRolesTable, true);
            aspNetUserRolesTable.AddTypeMapping(aspNetUserRolesTableMapping, false);
            tableMappings4.Add(aspNetUserRolesTableMapping);
            RelationalModel.CreateColumnMapping(roleIdColumn0, identityUserRole.FindProperty("RoleId")!, aspNetUserRolesTableMapping);
            RelationalModel.CreateColumnMapping(userIdColumn1, identityUserRole.FindProperty("UserId")!, aspNetUserRolesTableMapping);

            var identityUserToken = FindEntityType("Microsoft.AspNetCore.Identity.IdentityUserToken<string>")!;

            var defaultTableMappings5 = new List<TableMappingBase<ColumnMappingBase>>();
            identityUserToken.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings5);
            var microsoftAspNetCoreIdentityIdentityUserTokenstringTableBase = new TableBase("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", null, relationalModel);
            var loginProviderColumnBase0 = new ColumnBase<ColumnMappingBase>("LoginProvider", "nvarchar(450)", microsoftAspNetCoreIdentityIdentityUserTokenstringTableBase);
            microsoftAspNetCoreIdentityIdentityUserTokenstringTableBase.Columns.Add("LoginProvider", loginProviderColumnBase0);
            var nameColumnBase0 = new ColumnBase<ColumnMappingBase>("Name", "nvarchar(450)", microsoftAspNetCoreIdentityIdentityUserTokenstringTableBase);
            microsoftAspNetCoreIdentityIdentityUserTokenstringTableBase.Columns.Add("Name", nameColumnBase0);
            var userIdColumnBase2 = new ColumnBase<ColumnMappingBase>("UserId", "nvarchar(450)", microsoftAspNetCoreIdentityIdentityUserTokenstringTableBase);
            microsoftAspNetCoreIdentityIdentityUserTokenstringTableBase.Columns.Add("UserId", userIdColumnBase2);
            var valueColumnBase = new ColumnBase<ColumnMappingBase>("Value", "nvarchar(max)", microsoftAspNetCoreIdentityIdentityUserTokenstringTableBase)
            {
                IsNullable = true
            };
            microsoftAspNetCoreIdentityIdentityUserTokenstringTableBase.Columns.Add("Value", valueColumnBase);
            relationalModel.DefaultTables.Add("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", microsoftAspNetCoreIdentityIdentityUserTokenstringTableBase);
            var microsoftAspNetCoreIdentityIdentityUserTokenstringMappingBase = new TableMappingBase<ColumnMappingBase>(identityUserToken, microsoftAspNetCoreIdentityIdentityUserTokenstringTableBase, true);
            microsoftAspNetCoreIdentityIdentityUserTokenstringTableBase.AddTypeMapping(microsoftAspNetCoreIdentityIdentityUserTokenstringMappingBase, false);
            defaultTableMappings5.Add(microsoftAspNetCoreIdentityIdentityUserTokenstringMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)loginProviderColumnBase0, identityUserToken.FindProperty("LoginProvider")!, microsoftAspNetCoreIdentityIdentityUserTokenstringMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nameColumnBase0, identityUserToken.FindProperty("Name")!, microsoftAspNetCoreIdentityIdentityUserTokenstringMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)userIdColumnBase2, identityUserToken.FindProperty("UserId")!, microsoftAspNetCoreIdentityIdentityUserTokenstringMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)valueColumnBase, identityUserToken.FindProperty("Value")!, microsoftAspNetCoreIdentityIdentityUserTokenstringMappingBase);

            var tableMappings5 = new List<TableMapping>();
            identityUserToken.SetRuntimeAnnotation("Relational:TableMappings", tableMappings5);
            var aspNetUserTokensTable = new Table("AspNetUserTokens", null, relationalModel);
            var userIdColumn2 = new Column("UserId", "nvarchar(450)", aspNetUserTokensTable);
            aspNetUserTokensTable.Columns.Add("UserId", userIdColumn2);
            var loginProviderColumn0 = new Column("LoginProvider", "nvarchar(450)", aspNetUserTokensTable);
            aspNetUserTokensTable.Columns.Add("LoginProvider", loginProviderColumn0);
            var nameColumn0 = new Column("Name", "nvarchar(450)", aspNetUserTokensTable);
            aspNetUserTokensTable.Columns.Add("Name", nameColumn0);
            var valueColumn = new Column("Value", "nvarchar(max)", aspNetUserTokensTable)
            {
                IsNullable = true
            };
            aspNetUserTokensTable.Columns.Add("Value", valueColumn);
            var pK_AspNetUserTokens = new UniqueConstraint("PK_AspNetUserTokens", aspNetUserTokensTable, new[] { userIdColumn2, loginProviderColumn0, nameColumn0 });
            aspNetUserTokensTable.PrimaryKey = pK_AspNetUserTokens;
            var pK_AspNetUserTokensUc = RelationalModel.GetKey(this,
                "Microsoft.AspNetCore.Identity.IdentityUserToken<string>",
                new[] { "UserId", "LoginProvider", "Name" });
            pK_AspNetUserTokens.MappedKeys.Add(pK_AspNetUserTokensUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_AspNetUserTokensUc).Add(pK_AspNetUserTokens);
            aspNetUserTokensTable.UniqueConstraints.Add("PK_AspNetUserTokens", pK_AspNetUserTokens);
            relationalModel.Tables.Add(("AspNetUserTokens", null), aspNetUserTokensTable);
            var aspNetUserTokensTableMapping = new TableMapping(identityUserToken, aspNetUserTokensTable, true);
            aspNetUserTokensTable.AddTypeMapping(aspNetUserTokensTableMapping, false);
            tableMappings5.Add(aspNetUserTokensTableMapping);
            RelationalModel.CreateColumnMapping(loginProviderColumn0, identityUserToken.FindProperty("LoginProvider")!, aspNetUserTokensTableMapping);
            RelationalModel.CreateColumnMapping(nameColumn0, identityUserToken.FindProperty("Name")!, aspNetUserTokensTableMapping);
            RelationalModel.CreateColumnMapping(userIdColumn2, identityUserToken.FindProperty("UserId")!, aspNetUserTokensTableMapping);
            RelationalModel.CreateColumnMapping(valueColumn, identityUserToken.FindProperty("Value")!, aspNetUserTokensTableMapping);

            var order = FindEntityType("OnlineShop.Domain.Models.Order")!;

            var defaultTableMappings6 = new List<TableMappingBase<ColumnMappingBase>>();
            order.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings6);
            var onlineShopDomainModelsOrderTableBase = new TableBase("OnlineShop.Domain.Models.Order", null, relationalModel);
            var address1ColumnBase = new ColumnBase<ColumnMappingBase>("Address1", "nvarchar(max)", onlineShopDomainModelsOrderTableBase);
            onlineShopDomainModelsOrderTableBase.Columns.Add("Address1", address1ColumnBase);
            var address2ColumnBase = new ColumnBase<ColumnMappingBase>("Address2", "nvarchar(max)", onlineShopDomainModelsOrderTableBase);
            onlineShopDomainModelsOrderTableBase.Columns.Add("Address2", address2ColumnBase);
            var cityColumnBase = new ColumnBase<ColumnMappingBase>("City", "nvarchar(max)", onlineShopDomainModelsOrderTableBase);
            onlineShopDomainModelsOrderTableBase.Columns.Add("City", cityColumnBase);
            var emailColumnBase0 = new ColumnBase<ColumnMappingBase>("Email", "nvarchar(max)", onlineShopDomainModelsOrderTableBase);
            onlineShopDomainModelsOrderTableBase.Columns.Add("Email", emailColumnBase0);
            var firstNameColumnBase = new ColumnBase<ColumnMappingBase>("FirstName", "nvarchar(max)", onlineShopDomainModelsOrderTableBase);
            onlineShopDomainModelsOrderTableBase.Columns.Add("FirstName", firstNameColumnBase);
            var idColumnBase3 = new ColumnBase<ColumnMappingBase>("Id", "int", onlineShopDomainModelsOrderTableBase);
            onlineShopDomainModelsOrderTableBase.Columns.Add("Id", idColumnBase3);
            var lastNameColumnBase = new ColumnBase<ColumnMappingBase>("LastName", "nvarchar(max)", onlineShopDomainModelsOrderTableBase);
            onlineShopDomainModelsOrderTableBase.Columns.Add("LastName", lastNameColumnBase);
            var orderRefColumnBase = new ColumnBase<ColumnMappingBase>("OrderRef", "nvarchar(max)", onlineShopDomainModelsOrderTableBase);
            onlineShopDomainModelsOrderTableBase.Columns.Add("OrderRef", orderRefColumnBase);
            var phoneNumberColumnBase0 = new ColumnBase<ColumnMappingBase>("PhoneNumber", "nvarchar(max)", onlineShopDomainModelsOrderTableBase);
            onlineShopDomainModelsOrderTableBase.Columns.Add("PhoneNumber", phoneNumberColumnBase0);
            var postCodeColumnBase = new ColumnBase<ColumnMappingBase>("PostCode", "nvarchar(max)", onlineShopDomainModelsOrderTableBase);
            onlineShopDomainModelsOrderTableBase.Columns.Add("PostCode", postCodeColumnBase);
            var stripeReferenceColumnBase = new ColumnBase<ColumnMappingBase>("StripeReference", "nvarchar(max)", onlineShopDomainModelsOrderTableBase);
            onlineShopDomainModelsOrderTableBase.Columns.Add("StripeReference", stripeReferenceColumnBase);
            relationalModel.DefaultTables.Add("OnlineShop.Domain.Models.Order", onlineShopDomainModelsOrderTableBase);
            var onlineShopDomainModelsOrderMappingBase = new TableMappingBase<ColumnMappingBase>(order, onlineShopDomainModelsOrderTableBase, true);
            onlineShopDomainModelsOrderTableBase.AddTypeMapping(onlineShopDomainModelsOrderMappingBase, false);
            defaultTableMappings6.Add(onlineShopDomainModelsOrderMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase3, order.FindProperty("Id")!, onlineShopDomainModelsOrderMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)address1ColumnBase, order.FindProperty("Address1")!, onlineShopDomainModelsOrderMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)address2ColumnBase, order.FindProperty("Address2")!, onlineShopDomainModelsOrderMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)cityColumnBase, order.FindProperty("City")!, onlineShopDomainModelsOrderMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)emailColumnBase0, order.FindProperty("Email")!, onlineShopDomainModelsOrderMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)firstNameColumnBase, order.FindProperty("FirstName")!, onlineShopDomainModelsOrderMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)lastNameColumnBase, order.FindProperty("LastName")!, onlineShopDomainModelsOrderMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)orderRefColumnBase, order.FindProperty("OrderRef")!, onlineShopDomainModelsOrderMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)phoneNumberColumnBase0, order.FindProperty("PhoneNumber")!, onlineShopDomainModelsOrderMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)postCodeColumnBase, order.FindProperty("PostCode")!, onlineShopDomainModelsOrderMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)stripeReferenceColumnBase, order.FindProperty("StripeReference")!, onlineShopDomainModelsOrderMappingBase);

            var tableMappings6 = new List<TableMapping>();
            order.SetRuntimeAnnotation("Relational:TableMappings", tableMappings6);
            var ordersTable = new Table("Orders", null, relationalModel);
            var idColumn3 = new Column("Id", "int", ordersTable);
            ordersTable.Columns.Add("Id", idColumn3);
            var address1Column = new Column("Address1", "nvarchar(max)", ordersTable);
            ordersTable.Columns.Add("Address1", address1Column);
            var address2Column = new Column("Address2", "nvarchar(max)", ordersTable);
            ordersTable.Columns.Add("Address2", address2Column);
            var cityColumn = new Column("City", "nvarchar(max)", ordersTable);
            ordersTable.Columns.Add("City", cityColumn);
            var emailColumn0 = new Column("Email", "nvarchar(max)", ordersTable);
            ordersTable.Columns.Add("Email", emailColumn0);
            var firstNameColumn = new Column("FirstName", "nvarchar(max)", ordersTable);
            ordersTable.Columns.Add("FirstName", firstNameColumn);
            var lastNameColumn = new Column("LastName", "nvarchar(max)", ordersTable);
            ordersTable.Columns.Add("LastName", lastNameColumn);
            var orderRefColumn = new Column("OrderRef", "nvarchar(max)", ordersTable);
            ordersTable.Columns.Add("OrderRef", orderRefColumn);
            var phoneNumberColumn0 = new Column("PhoneNumber", "nvarchar(max)", ordersTable);
            ordersTable.Columns.Add("PhoneNumber", phoneNumberColumn0);
            var postCodeColumn = new Column("PostCode", "nvarchar(max)", ordersTable);
            ordersTable.Columns.Add("PostCode", postCodeColumn);
            var stripeReferenceColumn = new Column("StripeReference", "nvarchar(max)", ordersTable);
            ordersTable.Columns.Add("StripeReference", stripeReferenceColumn);
            var pK_Orders = new UniqueConstraint("PK_Orders", ordersTable, new[] { idColumn3 });
            ordersTable.PrimaryKey = pK_Orders;
            var pK_OrdersUc = RelationalModel.GetKey(this,
                "OnlineShop.Domain.Models.Order",
                new[] { "Id" });
            pK_Orders.MappedKeys.Add(pK_OrdersUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_OrdersUc).Add(pK_Orders);
            ordersTable.UniqueConstraints.Add("PK_Orders", pK_Orders);
            relationalModel.Tables.Add(("Orders", null), ordersTable);
            var ordersTableMapping = new TableMapping(order, ordersTable, true);
            ordersTable.AddTypeMapping(ordersTableMapping, false);
            tableMappings6.Add(ordersTableMapping);
            RelationalModel.CreateColumnMapping(idColumn3, order.FindProperty("Id")!, ordersTableMapping);
            RelationalModel.CreateColumnMapping(address1Column, order.FindProperty("Address1")!, ordersTableMapping);
            RelationalModel.CreateColumnMapping(address2Column, order.FindProperty("Address2")!, ordersTableMapping);
            RelationalModel.CreateColumnMapping(cityColumn, order.FindProperty("City")!, ordersTableMapping);
            RelationalModel.CreateColumnMapping(emailColumn0, order.FindProperty("Email")!, ordersTableMapping);
            RelationalModel.CreateColumnMapping(firstNameColumn, order.FindProperty("FirstName")!, ordersTableMapping);
            RelationalModel.CreateColumnMapping(lastNameColumn, order.FindProperty("LastName")!, ordersTableMapping);
            RelationalModel.CreateColumnMapping(orderRefColumn, order.FindProperty("OrderRef")!, ordersTableMapping);
            RelationalModel.CreateColumnMapping(phoneNumberColumn0, order.FindProperty("PhoneNumber")!, ordersTableMapping);
            RelationalModel.CreateColumnMapping(postCodeColumn, order.FindProperty("PostCode")!, ordersTableMapping);
            RelationalModel.CreateColumnMapping(stripeReferenceColumn, order.FindProperty("StripeReference")!, ordersTableMapping);

            var orderStock = FindEntityType("OnlineShop.Domain.Models.OrderStock")!;

            var defaultTableMappings7 = new List<TableMappingBase<ColumnMappingBase>>();
            orderStock.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings7);
            var onlineShopDomainModelsOrderStockTableBase = new TableBase("OnlineShop.Domain.Models.OrderStock", null, relationalModel);
            var orderIdColumnBase = new ColumnBase<ColumnMappingBase>("OrderId", "int", onlineShopDomainModelsOrderStockTableBase);
            onlineShopDomainModelsOrderStockTableBase.Columns.Add("OrderId", orderIdColumnBase);
            var quantityColumnBase = new ColumnBase<ColumnMappingBase>("Quantity", "int", onlineShopDomainModelsOrderStockTableBase);
            onlineShopDomainModelsOrderStockTableBase.Columns.Add("Quantity", quantityColumnBase);
            var stockIdColumnBase = new ColumnBase<ColumnMappingBase>("StockId", "int", onlineShopDomainModelsOrderStockTableBase);
            onlineShopDomainModelsOrderStockTableBase.Columns.Add("StockId", stockIdColumnBase);
            relationalModel.DefaultTables.Add("OnlineShop.Domain.Models.OrderStock", onlineShopDomainModelsOrderStockTableBase);
            var onlineShopDomainModelsOrderStockMappingBase = new TableMappingBase<ColumnMappingBase>(orderStock, onlineShopDomainModelsOrderStockTableBase, true);
            onlineShopDomainModelsOrderStockTableBase.AddTypeMapping(onlineShopDomainModelsOrderStockMappingBase, false);
            defaultTableMappings7.Add(onlineShopDomainModelsOrderStockMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)orderIdColumnBase, orderStock.FindProperty("OrderId")!, onlineShopDomainModelsOrderStockMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)stockIdColumnBase, orderStock.FindProperty("StockId")!, onlineShopDomainModelsOrderStockMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)quantityColumnBase, orderStock.FindProperty("Quantity")!, onlineShopDomainModelsOrderStockMappingBase);

            var tableMappings7 = new List<TableMapping>();
            orderStock.SetRuntimeAnnotation("Relational:TableMappings", tableMappings7);
            var orderStocksTable = new Table("OrderStocks", null, relationalModel);
            var stockIdColumn = new Column("StockId", "int", orderStocksTable);
            orderStocksTable.Columns.Add("StockId", stockIdColumn);
            var orderIdColumn = new Column("OrderId", "int", orderStocksTable);
            orderStocksTable.Columns.Add("OrderId", orderIdColumn);
            var quantityColumn = new Column("Quantity", "int", orderStocksTable);
            orderStocksTable.Columns.Add("Quantity", quantityColumn);
            var pK_OrderStocks = new UniqueConstraint("PK_OrderStocks", orderStocksTable, new[] { stockIdColumn, orderIdColumn });
            orderStocksTable.PrimaryKey = pK_OrderStocks;
            var pK_OrderStocksUc = RelationalModel.GetKey(this,
                "OnlineShop.Domain.Models.OrderStock",
                new[] { "StockId", "OrderId" });
            pK_OrderStocks.MappedKeys.Add(pK_OrderStocksUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_OrderStocksUc).Add(pK_OrderStocks);
            orderStocksTable.UniqueConstraints.Add("PK_OrderStocks", pK_OrderStocks);
            var iX_OrderStocks_OrderId = new TableIndex(
            "IX_OrderStocks_OrderId", orderStocksTable, new[] { orderIdColumn }, false);
            var iX_OrderStocks_OrderIdIx = RelationalModel.GetIndex(this,
                "OnlineShop.Domain.Models.OrderStock",
                new[] { "OrderId" });
            iX_OrderStocks_OrderId.MappedIndexes.Add(iX_OrderStocks_OrderIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_OrderStocks_OrderIdIx).Add(iX_OrderStocks_OrderId);
            orderStocksTable.Indexes.Add("IX_OrderStocks_OrderId", iX_OrderStocks_OrderId);
            relationalModel.Tables.Add(("OrderStocks", null), orderStocksTable);
            var orderStocksTableMapping = new TableMapping(orderStock, orderStocksTable, true);
            orderStocksTable.AddTypeMapping(orderStocksTableMapping, false);
            tableMappings7.Add(orderStocksTableMapping);
            RelationalModel.CreateColumnMapping(orderIdColumn, orderStock.FindProperty("OrderId")!, orderStocksTableMapping);
            RelationalModel.CreateColumnMapping(stockIdColumn, orderStock.FindProperty("StockId")!, orderStocksTableMapping);
            RelationalModel.CreateColumnMapping(quantityColumn, orderStock.FindProperty("Quantity")!, orderStocksTableMapping);

            var product = FindEntityType("OnlineShop.Domain.Models.Product")!;

            var defaultTableMappings8 = new List<TableMappingBase<ColumnMappingBase>>();
            product.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings8);
            var onlineShopDomainModelsProductTableBase = new TableBase("OnlineShop.Domain.Models.Product", null, relationalModel);
            var descriptionColumnBase = new ColumnBase<ColumnMappingBase>("Description", "nvarchar(max)", onlineShopDomainModelsProductTableBase);
            onlineShopDomainModelsProductTableBase.Columns.Add("Description", descriptionColumnBase);
            var idColumnBase4 = new ColumnBase<ColumnMappingBase>("Id", "int", onlineShopDomainModelsProductTableBase);
            onlineShopDomainModelsProductTableBase.Columns.Add("Id", idColumnBase4);
            var nameColumnBase1 = new ColumnBase<ColumnMappingBase>("Name", "nvarchar(max)", onlineShopDomainModelsProductTableBase);
            onlineShopDomainModelsProductTableBase.Columns.Add("Name", nameColumnBase1);
            var valueColumnBase0 = new ColumnBase<ColumnMappingBase>("Value", "decimal(18,2)", onlineShopDomainModelsProductTableBase);
            onlineShopDomainModelsProductTableBase.Columns.Add("Value", valueColumnBase0);
            relationalModel.DefaultTables.Add("OnlineShop.Domain.Models.Product", onlineShopDomainModelsProductTableBase);
            var onlineShopDomainModelsProductMappingBase = new TableMappingBase<ColumnMappingBase>(product, onlineShopDomainModelsProductTableBase, true);
            onlineShopDomainModelsProductTableBase.AddTypeMapping(onlineShopDomainModelsProductMappingBase, false);
            defaultTableMappings8.Add(onlineShopDomainModelsProductMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase4, product.FindProperty("Id")!, onlineShopDomainModelsProductMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)descriptionColumnBase, product.FindProperty("Description")!, onlineShopDomainModelsProductMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nameColumnBase1, product.FindProperty("Name")!, onlineShopDomainModelsProductMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)valueColumnBase0, product.FindProperty("Value")!, onlineShopDomainModelsProductMappingBase);

            var tableMappings8 = new List<TableMapping>();
            product.SetRuntimeAnnotation("Relational:TableMappings", tableMappings8);
            var productsTable = new Table("Products", null, relationalModel);
            var idColumn4 = new Column("Id", "int", productsTable);
            productsTable.Columns.Add("Id", idColumn4);
            var descriptionColumn = new Column("Description", "nvarchar(max)", productsTable);
            productsTable.Columns.Add("Description", descriptionColumn);
            var nameColumn1 = new Column("Name", "nvarchar(max)", productsTable);
            productsTable.Columns.Add("Name", nameColumn1);
            var valueColumn0 = new Column("Value", "decimal(18,2)", productsTable);
            productsTable.Columns.Add("Value", valueColumn0);
            var pK_Products = new UniqueConstraint("PK_Products", productsTable, new[] { idColumn4 });
            productsTable.PrimaryKey = pK_Products;
            var pK_ProductsUc = RelationalModel.GetKey(this,
                "OnlineShop.Domain.Models.Product",
                new[] { "Id" });
            pK_Products.MappedKeys.Add(pK_ProductsUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_ProductsUc).Add(pK_Products);
            productsTable.UniqueConstraints.Add("PK_Products", pK_Products);
            relationalModel.Tables.Add(("Products", null), productsTable);
            var productsTableMapping = new TableMapping(product, productsTable, true);
            productsTable.AddTypeMapping(productsTableMapping, false);
            tableMappings8.Add(productsTableMapping);
            RelationalModel.CreateColumnMapping(idColumn4, product.FindProperty("Id")!, productsTableMapping);
            RelationalModel.CreateColumnMapping(descriptionColumn, product.FindProperty("Description")!, productsTableMapping);
            RelationalModel.CreateColumnMapping(nameColumn1, product.FindProperty("Name")!, productsTableMapping);
            RelationalModel.CreateColumnMapping(valueColumn0, product.FindProperty("Value")!, productsTableMapping);

            var stock = FindEntityType("OnlineShop.Domain.Models.Stock")!;

            var defaultTableMappings9 = new List<TableMappingBase<ColumnMappingBase>>();
            stock.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings9);
            var onlineShopDomainModelsStockTableBase = new TableBase("OnlineShop.Domain.Models.Stock", null, relationalModel);
            var descriptionColumnBase0 = new ColumnBase<ColumnMappingBase>("Description", "nvarchar(max)", onlineShopDomainModelsStockTableBase);
            onlineShopDomainModelsStockTableBase.Columns.Add("Description", descriptionColumnBase0);
            var idColumnBase5 = new ColumnBase<ColumnMappingBase>("Id", "int", onlineShopDomainModelsStockTableBase);
            onlineShopDomainModelsStockTableBase.Columns.Add("Id", idColumnBase5);
            var productIdColumnBase = new ColumnBase<ColumnMappingBase>("ProductId", "int", onlineShopDomainModelsStockTableBase);
            onlineShopDomainModelsStockTableBase.Columns.Add("ProductId", productIdColumnBase);
            var quantityColumnBase0 = new ColumnBase<ColumnMappingBase>("Quantity", "int", onlineShopDomainModelsStockTableBase);
            onlineShopDomainModelsStockTableBase.Columns.Add("Quantity", quantityColumnBase0);
            relationalModel.DefaultTables.Add("OnlineShop.Domain.Models.Stock", onlineShopDomainModelsStockTableBase);
            var onlineShopDomainModelsStockMappingBase = new TableMappingBase<ColumnMappingBase>(stock, onlineShopDomainModelsStockTableBase, true);
            onlineShopDomainModelsStockTableBase.AddTypeMapping(onlineShopDomainModelsStockMappingBase, false);
            defaultTableMappings9.Add(onlineShopDomainModelsStockMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase5, stock.FindProperty("Id")!, onlineShopDomainModelsStockMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)descriptionColumnBase0, stock.FindProperty("Description")!, onlineShopDomainModelsStockMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)productIdColumnBase, stock.FindProperty("ProductId")!, onlineShopDomainModelsStockMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)quantityColumnBase0, stock.FindProperty("Quantity")!, onlineShopDomainModelsStockMappingBase);

            var tableMappings9 = new List<TableMapping>();
            stock.SetRuntimeAnnotation("Relational:TableMappings", tableMappings9);
            var stockTable = new Table("Stock", null, relationalModel);
            var idColumn5 = new Column("Id", "int", stockTable);
            stockTable.Columns.Add("Id", idColumn5);
            var descriptionColumn0 = new Column("Description", "nvarchar(max)", stockTable);
            stockTable.Columns.Add("Description", descriptionColumn0);
            var productIdColumn = new Column("ProductId", "int", stockTable);
            stockTable.Columns.Add("ProductId", productIdColumn);
            var quantityColumn0 = new Column("Quantity", "int", stockTable);
            stockTable.Columns.Add("Quantity", quantityColumn0);
            var pK_Stock = new UniqueConstraint("PK_Stock", stockTable, new[] { idColumn5 });
            stockTable.PrimaryKey = pK_Stock;
            var pK_StockUc = RelationalModel.GetKey(this,
                "OnlineShop.Domain.Models.Stock",
                new[] { "Id" });
            pK_Stock.MappedKeys.Add(pK_StockUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_StockUc).Add(pK_Stock);
            stockTable.UniqueConstraints.Add("PK_Stock", pK_Stock);
            var iX_Stock_ProductId = new TableIndex(
            "IX_Stock_ProductId", stockTable, new[] { productIdColumn }, false);
            var iX_Stock_ProductIdIx = RelationalModel.GetIndex(this,
                "OnlineShop.Domain.Models.Stock",
                new[] { "ProductId" });
            iX_Stock_ProductId.MappedIndexes.Add(iX_Stock_ProductIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_Stock_ProductIdIx).Add(iX_Stock_ProductId);
            stockTable.Indexes.Add("IX_Stock_ProductId", iX_Stock_ProductId);
            relationalModel.Tables.Add(("Stock", null), stockTable);
            var stockTableMapping = new TableMapping(stock, stockTable, true);
            stockTable.AddTypeMapping(stockTableMapping, false);
            tableMappings9.Add(stockTableMapping);
            RelationalModel.CreateColumnMapping(idColumn5, stock.FindProperty("Id")!, stockTableMapping);
            RelationalModel.CreateColumnMapping(descriptionColumn0, stock.FindProperty("Description")!, stockTableMapping);
            RelationalModel.CreateColumnMapping(productIdColumn, stock.FindProperty("ProductId")!, stockTableMapping);
            RelationalModel.CreateColumnMapping(quantityColumn0, stock.FindProperty("Quantity")!, stockTableMapping);

            var stockOnHold = FindEntityType("OnlineShop.Domain.Models.StockOnHold")!;

            var defaultTableMappings10 = new List<TableMappingBase<ColumnMappingBase>>();
            stockOnHold.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings10);
            var onlineShopDomainModelsStockOnHoldTableBase = new TableBase("OnlineShop.Domain.Models.StockOnHold", null, relationalModel);
            var expiryDateColumnBase = new ColumnBase<ColumnMappingBase>("ExpiryDate", "datetime2", onlineShopDomainModelsStockOnHoldTableBase);
            onlineShopDomainModelsStockOnHoldTableBase.Columns.Add("ExpiryDate", expiryDateColumnBase);
            var idColumnBase6 = new ColumnBase<ColumnMappingBase>("Id", "int", onlineShopDomainModelsStockOnHoldTableBase);
            onlineShopDomainModelsStockOnHoldTableBase.Columns.Add("Id", idColumnBase6);
            var quantityColumnBase1 = new ColumnBase<ColumnMappingBase>("Quantity", "int", onlineShopDomainModelsStockOnHoldTableBase);
            onlineShopDomainModelsStockOnHoldTableBase.Columns.Add("Quantity", quantityColumnBase1);
            var stockIdColumnBase0 = new ColumnBase<ColumnMappingBase>("StockId", "int", onlineShopDomainModelsStockOnHoldTableBase);
            onlineShopDomainModelsStockOnHoldTableBase.Columns.Add("StockId", stockIdColumnBase0);
            relationalModel.DefaultTables.Add("OnlineShop.Domain.Models.StockOnHold", onlineShopDomainModelsStockOnHoldTableBase);
            var onlineShopDomainModelsStockOnHoldMappingBase = new TableMappingBase<ColumnMappingBase>(stockOnHold, onlineShopDomainModelsStockOnHoldTableBase, true);
            onlineShopDomainModelsStockOnHoldTableBase.AddTypeMapping(onlineShopDomainModelsStockOnHoldMappingBase, false);
            defaultTableMappings10.Add(onlineShopDomainModelsStockOnHoldMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase6, stockOnHold.FindProperty("Id")!, onlineShopDomainModelsStockOnHoldMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)expiryDateColumnBase, stockOnHold.FindProperty("ExpiryDate")!, onlineShopDomainModelsStockOnHoldMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)quantityColumnBase1, stockOnHold.FindProperty("Quantity")!, onlineShopDomainModelsStockOnHoldMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)stockIdColumnBase0, stockOnHold.FindProperty("StockId")!, onlineShopDomainModelsStockOnHoldMappingBase);

            var tableMappings10 = new List<TableMapping>();
            stockOnHold.SetRuntimeAnnotation("Relational:TableMappings", tableMappings10);
            var stockOnHoldTable = new Table("StockOnHold", null, relationalModel);
            var idColumn6 = new Column("Id", "int", stockOnHoldTable);
            stockOnHoldTable.Columns.Add("Id", idColumn6);
            var expiryDateColumn = new Column("ExpiryDate", "datetime2", stockOnHoldTable);
            stockOnHoldTable.Columns.Add("ExpiryDate", expiryDateColumn);
            var quantityColumn1 = new Column("Quantity", "int", stockOnHoldTable);
            stockOnHoldTable.Columns.Add("Quantity", quantityColumn1);
            var stockIdColumn0 = new Column("StockId", "int", stockOnHoldTable);
            stockOnHoldTable.Columns.Add("StockId", stockIdColumn0);
            var pK_StockOnHold = new UniqueConstraint("PK_StockOnHold", stockOnHoldTable, new[] { idColumn6 });
            stockOnHoldTable.PrimaryKey = pK_StockOnHold;
            var pK_StockOnHoldUc = RelationalModel.GetKey(this,
                "OnlineShop.Domain.Models.StockOnHold",
                new[] { "Id" });
            pK_StockOnHold.MappedKeys.Add(pK_StockOnHoldUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_StockOnHoldUc).Add(pK_StockOnHold);
            stockOnHoldTable.UniqueConstraints.Add("PK_StockOnHold", pK_StockOnHold);
            var iX_StockOnHold_StockId = new TableIndex(
            "IX_StockOnHold_StockId", stockOnHoldTable, new[] { stockIdColumn0 }, false);
            var iX_StockOnHold_StockIdIx = RelationalModel.GetIndex(this,
                "OnlineShop.Domain.Models.StockOnHold",
                new[] { "StockId" });
            iX_StockOnHold_StockId.MappedIndexes.Add(iX_StockOnHold_StockIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_StockOnHold_StockIdIx).Add(iX_StockOnHold_StockId);
            stockOnHoldTable.Indexes.Add("IX_StockOnHold_StockId", iX_StockOnHold_StockId);
            relationalModel.Tables.Add(("StockOnHold", null), stockOnHoldTable);
            var stockOnHoldTableMapping = new TableMapping(stockOnHold, stockOnHoldTable, true);
            stockOnHoldTable.AddTypeMapping(stockOnHoldTableMapping, false);
            tableMappings10.Add(stockOnHoldTableMapping);
            RelationalModel.CreateColumnMapping(idColumn6, stockOnHold.FindProperty("Id")!, stockOnHoldTableMapping);
            RelationalModel.CreateColumnMapping(expiryDateColumn, stockOnHold.FindProperty("ExpiryDate")!, stockOnHoldTableMapping);
            RelationalModel.CreateColumnMapping(quantityColumn1, stockOnHold.FindProperty("Quantity")!, stockOnHoldTableMapping);
            RelationalModel.CreateColumnMapping(stockIdColumn0, stockOnHold.FindProperty("StockId")!, stockOnHoldTableMapping);
            var fK_AspNetRoleClaims_AspNetRoles_RoleId = new ForeignKeyConstraint(
                "FK_AspNetRoleClaims_AspNetRoles_RoleId", aspNetRoleClaimsTable, aspNetRolesTable,
                new[] { roleIdColumn },
                aspNetRolesTable.FindUniqueConstraint("PK_AspNetRoles")!, ReferentialAction.Cascade);
            var fK_AspNetRoleClaims_AspNetRoles_RoleIdFk = RelationalModel.GetForeignKey(this,
                "Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>",
                new[] { "RoleId" },
                "Microsoft.AspNetCore.Identity.IdentityRole",
                new[] { "Id" });
            fK_AspNetRoleClaims_AspNetRoles_RoleId.MappedForeignKeys.Add(fK_AspNetRoleClaims_AspNetRoles_RoleIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_AspNetRoleClaims_AspNetRoles_RoleIdFk).Add(fK_AspNetRoleClaims_AspNetRoles_RoleId);
            aspNetRoleClaimsTable.ForeignKeyConstraints.Add(fK_AspNetRoleClaims_AspNetRoles_RoleId);
            aspNetRolesTable.ReferencingForeignKeyConstraints.Add(fK_AspNetRoleClaims_AspNetRoles_RoleId);
            var fK_AspNetUserClaims_AspNetUsers_UserId = new ForeignKeyConstraint(
                "FK_AspNetUserClaims_AspNetUsers_UserId", aspNetUserClaimsTable, aspNetUsersTable,
                new[] { userIdColumn },
                aspNetUsersTable.FindUniqueConstraint("PK_AspNetUsers")!, ReferentialAction.Cascade);
            var fK_AspNetUserClaims_AspNetUsers_UserIdFk = RelationalModel.GetForeignKey(this,
                "Microsoft.AspNetCore.Identity.IdentityUserClaim<string>",
                new[] { "UserId" },
                "Microsoft.AspNetCore.Identity.IdentityUser",
                new[] { "Id" });
            fK_AspNetUserClaims_AspNetUsers_UserId.MappedForeignKeys.Add(fK_AspNetUserClaims_AspNetUsers_UserIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_AspNetUserClaims_AspNetUsers_UserIdFk).Add(fK_AspNetUserClaims_AspNetUsers_UserId);
            aspNetUserClaimsTable.ForeignKeyConstraints.Add(fK_AspNetUserClaims_AspNetUsers_UserId);
            aspNetUsersTable.ReferencingForeignKeyConstraints.Add(fK_AspNetUserClaims_AspNetUsers_UserId);
            var fK_AspNetUserLogins_AspNetUsers_UserId = new ForeignKeyConstraint(
                "FK_AspNetUserLogins_AspNetUsers_UserId", aspNetUserLoginsTable, aspNetUsersTable,
                new[] { userIdColumn0 },
                aspNetUsersTable.FindUniqueConstraint("PK_AspNetUsers")!, ReferentialAction.Cascade);
            var fK_AspNetUserLogins_AspNetUsers_UserIdFk = RelationalModel.GetForeignKey(this,
                "Microsoft.AspNetCore.Identity.IdentityUserLogin<string>",
                new[] { "UserId" },
                "Microsoft.AspNetCore.Identity.IdentityUser",
                new[] { "Id" });
            fK_AspNetUserLogins_AspNetUsers_UserId.MappedForeignKeys.Add(fK_AspNetUserLogins_AspNetUsers_UserIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_AspNetUserLogins_AspNetUsers_UserIdFk).Add(fK_AspNetUserLogins_AspNetUsers_UserId);
            aspNetUserLoginsTable.ForeignKeyConstraints.Add(fK_AspNetUserLogins_AspNetUsers_UserId);
            aspNetUsersTable.ReferencingForeignKeyConstraints.Add(fK_AspNetUserLogins_AspNetUsers_UserId);
            var fK_AspNetUserRoles_AspNetRoles_RoleId = new ForeignKeyConstraint(
                "FK_AspNetUserRoles_AspNetRoles_RoleId", aspNetUserRolesTable, aspNetRolesTable,
                new[] { roleIdColumn0 },
                aspNetRolesTable.FindUniqueConstraint("PK_AspNetRoles")!, ReferentialAction.Cascade);
            var fK_AspNetUserRoles_AspNetRoles_RoleIdFk = RelationalModel.GetForeignKey(this,
                "Microsoft.AspNetCore.Identity.IdentityUserRole<string>",
                new[] { "RoleId" },
                "Microsoft.AspNetCore.Identity.IdentityRole",
                new[] { "Id" });
            fK_AspNetUserRoles_AspNetRoles_RoleId.MappedForeignKeys.Add(fK_AspNetUserRoles_AspNetRoles_RoleIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_AspNetUserRoles_AspNetRoles_RoleIdFk).Add(fK_AspNetUserRoles_AspNetRoles_RoleId);
            aspNetUserRolesTable.ForeignKeyConstraints.Add(fK_AspNetUserRoles_AspNetRoles_RoleId);
            aspNetRolesTable.ReferencingForeignKeyConstraints.Add(fK_AspNetUserRoles_AspNetRoles_RoleId);
            var fK_AspNetUserRoles_AspNetUsers_UserId = new ForeignKeyConstraint(
                "FK_AspNetUserRoles_AspNetUsers_UserId", aspNetUserRolesTable, aspNetUsersTable,
                new[] { userIdColumn1 },
                aspNetUsersTable.FindUniqueConstraint("PK_AspNetUsers")!, ReferentialAction.Cascade);
            var fK_AspNetUserRoles_AspNetUsers_UserIdFk = RelationalModel.GetForeignKey(this,
                "Microsoft.AspNetCore.Identity.IdentityUserRole<string>",
                new[] { "UserId" },
                "Microsoft.AspNetCore.Identity.IdentityUser",
                new[] { "Id" });
            fK_AspNetUserRoles_AspNetUsers_UserId.MappedForeignKeys.Add(fK_AspNetUserRoles_AspNetUsers_UserIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_AspNetUserRoles_AspNetUsers_UserIdFk).Add(fK_AspNetUserRoles_AspNetUsers_UserId);
            aspNetUserRolesTable.ForeignKeyConstraints.Add(fK_AspNetUserRoles_AspNetUsers_UserId);
            aspNetUsersTable.ReferencingForeignKeyConstraints.Add(fK_AspNetUserRoles_AspNetUsers_UserId);
            var fK_AspNetUserTokens_AspNetUsers_UserId = new ForeignKeyConstraint(
                "FK_AspNetUserTokens_AspNetUsers_UserId", aspNetUserTokensTable, aspNetUsersTable,
                new[] { userIdColumn2 },
                aspNetUsersTable.FindUniqueConstraint("PK_AspNetUsers")!, ReferentialAction.Cascade);
            var fK_AspNetUserTokens_AspNetUsers_UserIdFk = RelationalModel.GetForeignKey(this,
                "Microsoft.AspNetCore.Identity.IdentityUserToken<string>",
                new[] { "UserId" },
                "Microsoft.AspNetCore.Identity.IdentityUser",
                new[] { "Id" });
            fK_AspNetUserTokens_AspNetUsers_UserId.MappedForeignKeys.Add(fK_AspNetUserTokens_AspNetUsers_UserIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_AspNetUserTokens_AspNetUsers_UserIdFk).Add(fK_AspNetUserTokens_AspNetUsers_UserId);
            aspNetUserTokensTable.ForeignKeyConstraints.Add(fK_AspNetUserTokens_AspNetUsers_UserId);
            aspNetUsersTable.ReferencingForeignKeyConstraints.Add(fK_AspNetUserTokens_AspNetUsers_UserId);
            var fK_OrderStocks_Orders_OrderId = new ForeignKeyConstraint(
                "FK_OrderStocks_Orders_OrderId", orderStocksTable, ordersTable,
                new[] { orderIdColumn },
                ordersTable.FindUniqueConstraint("PK_Orders")!, ReferentialAction.Cascade);
            var fK_OrderStocks_Orders_OrderIdFk = RelationalModel.GetForeignKey(this,
                "OnlineShop.Domain.Models.OrderStock",
                new[] { "OrderId" },
                "OnlineShop.Domain.Models.Order",
                new[] { "Id" });
            fK_OrderStocks_Orders_OrderId.MappedForeignKeys.Add(fK_OrderStocks_Orders_OrderIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_OrderStocks_Orders_OrderIdFk).Add(fK_OrderStocks_Orders_OrderId);
            orderStocksTable.ForeignKeyConstraints.Add(fK_OrderStocks_Orders_OrderId);
            ordersTable.ReferencingForeignKeyConstraints.Add(fK_OrderStocks_Orders_OrderId);
            var fK_OrderStocks_Stock_StockId = new ForeignKeyConstraint(
                "FK_OrderStocks_Stock_StockId", orderStocksTable, stockTable,
                new[] { stockIdColumn },
                stockTable.FindUniqueConstraint("PK_Stock")!, ReferentialAction.Cascade);
            var fK_OrderStocks_Stock_StockIdFk = RelationalModel.GetForeignKey(this,
                "OnlineShop.Domain.Models.OrderStock",
                new[] { "StockId" },
                "OnlineShop.Domain.Models.Stock",
                new[] { "Id" });
            fK_OrderStocks_Stock_StockId.MappedForeignKeys.Add(fK_OrderStocks_Stock_StockIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_OrderStocks_Stock_StockIdFk).Add(fK_OrderStocks_Stock_StockId);
            orderStocksTable.ForeignKeyConstraints.Add(fK_OrderStocks_Stock_StockId);
            stockTable.ReferencingForeignKeyConstraints.Add(fK_OrderStocks_Stock_StockId);
            var fK_Stock_Products_ProductId = new ForeignKeyConstraint(
                "FK_Stock_Products_ProductId", stockTable, productsTable,
                new[] { productIdColumn },
                productsTable.FindUniqueConstraint("PK_Products")!, ReferentialAction.Cascade);
            var fK_Stock_Products_ProductIdFk = RelationalModel.GetForeignKey(this,
                "OnlineShop.Domain.Models.Stock",
                new[] { "ProductId" },
                "OnlineShop.Domain.Models.Product",
                new[] { "Id" });
            fK_Stock_Products_ProductId.MappedForeignKeys.Add(fK_Stock_Products_ProductIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_Stock_Products_ProductIdFk).Add(fK_Stock_Products_ProductId);
            stockTable.ForeignKeyConstraints.Add(fK_Stock_Products_ProductId);
            productsTable.ReferencingForeignKeyConstraints.Add(fK_Stock_Products_ProductId);
            var fK_StockOnHold_Stock_StockId = new ForeignKeyConstraint(
                "FK_StockOnHold_Stock_StockId", stockOnHoldTable, stockTable,
                new[] { stockIdColumn0 },
                stockTable.FindUniqueConstraint("PK_Stock")!, ReferentialAction.Cascade);
            var fK_StockOnHold_Stock_StockIdFk = RelationalModel.GetForeignKey(this,
                "OnlineShop.Domain.Models.StockOnHold",
                new[] { "StockId" },
                "OnlineShop.Domain.Models.Stock",
                new[] { "Id" });
            fK_StockOnHold_Stock_StockId.MappedForeignKeys.Add(fK_StockOnHold_Stock_StockIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_StockOnHold_Stock_StockIdFk).Add(fK_StockOnHold_Stock_StockId);
            stockOnHoldTable.ForeignKeyConstraints.Add(fK_StockOnHold_Stock_StockId);
            stockTable.ReferencingForeignKeyConstraints.Add(fK_StockOnHold_Stock_StockId);
            return relationalModel.MakeReadOnly();
        }
    }
}
